{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this unit, we describe the procedure for training the transport mode detector. Further, we present the classification result for transport mode detector."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Transport mode classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Import and initialize MongoClient'''\n",
    "from scipy import integrate\n",
    "import numpy as np\n",
    "import pprint\n",
    "import math\n",
    "\n",
    "\n",
    "import subprocess\n",
    "import os\n",
    "import sys\n",
    "import json\n",
    "from pymongo import     MongoClient\n",
    "from pathlib import Path\n",
    "\n",
    "con = MongoClient()\n",
    "\n",
    "import pprint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Import Libs'''\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix,precision_score, recall_score, f1_score\n",
    "from sklearn import tree\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from collections import Counter\n",
    "from sklearn.impute import SimpleImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Import project specific library'''\n",
    "sys.path.append(os.path.join(os.getcwd(), 'LibCode'))\n",
    "import ReadAcclGPSRecord\n",
    "import SegmentsOtherThanStoppageSegments\n",
    "import EarthaxisAcceleration\n",
    "import EarthaxisAccelerationOnRawRecords\n",
    "import ComputeFeaturesTransportMode\n",
    "import FeaturesExtraction\n",
    "import TransportModeFeatureHelper\n",
    "import TMC_Helper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'TMC_Helper' from '/home/pruthvish/JRF/GitVersion_APTS_Software_Np/code/LibCode/TMC_Helper.py'>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''For updating the lib changes effects'''\n",
    "import importlib\n",
    "importlib.reload(ReadAcclGPSRecord)\n",
    "importlib.reload(SegmentsOtherThanStoppageSegments)\n",
    "importlib.reload(EarthaxisAcceleration)\n",
    "importlib.reload(EarthaxisAccelerationOnRawRecords)\n",
    "importlib.reload(ComputeFeaturesTransportMode)\n",
    "importlib.reload(FeaturesExtraction)\n",
    "importlib.reload(TransportModeFeatureHelper)\n",
    "importlib.reload(TMC_Helper)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save in MongoDB\n",
    "The transport mode detector is trained and validated on the trip records collected by data collection volunteers on their journey for various modes of transport. The accelerometer record is stored in the `RouteName = ISCON_PDPU_For_Transport_Mode` database of MongoDB. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`ID_State_Position_Direction_RouteStart_RouteEnd_Date__Time`\n",
    "\n",
    "`ID_Mode_Direction_RouteStart_RouteEnd_Date__Time`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ReadAndSaveData(TransportModeDir, RouteName):\n",
    "    '''\n",
    "    input: The route name and dataset directory name\n",
    "    \n",
    "    output: None\n",
    "    \n",
    "    function: It fetches the data records placed in the specified data set directory \n",
    "    and save them in the MongoDB database\n",
    "    '''\n",
    "    \n",
    "    '''E.g., BM, CM, Bike, Car'''\n",
    "    for fileName in [f for f in os.listdir(os.path.join(TransportModeDir,RouteName))]:\n",
    "        FileNameSplitted = fileName.split('_')\n",
    "        DeviceID = FileNameSplitted[0]\n",
    "        Mode = FileNameSplitted[1]\n",
    "        ReadAcclGPSRecord.SaveInMongoFunction(RouteName,\n",
    "                                              os.path.join(TransportModeDir, RouteName, fileName),\n",
    "                                              f'{DeviceID}.{Mode}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Aforementioned, in earlier unit, the `horizontal and vertical components` of accelerometer records for the bus, bike and car trips corresponding to the `stoppage segments` resembles similar pattern. Therefore, such stoppage segments are discraded during the transport mode detection using `stopage triggers`. Thus, the transport mode detector is trained and validated on the `horizontal and vertical components` of accelerometer records of segments other than stoppage segment based on the `accelerometer triggers`.\n",
    "\n",
    "Further, we have trained the `transport mode detector` for the `horizontal and vertical components` of accelerometer records of entire trip (including the stoppage segments). Subsequently, the performance of the former and latter approach are compared."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Processing: For entire trip\n",
    "This section describes the procedure for training the classifier on the `entire trip record` (including the stoppage semgents)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decomposition of accelerometer data\n",
    "The accelerometer record data is decomposed to `horizontal and vertical components` with the `IntervalLength` of `140 points.`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ComputeEarthAxisComponentRaw(RouteName, IntervalLength, RecordType):\n",
    "    '''\n",
    "    input: The route name, interval length for computing accelerometer components\n",
    "    and record type variable to specify the segment type of the records.\n",
    "    \n",
    "    output: None\n",
    "    \n",
    "    function: It extracts the raw accelerometer records from the MongoDB database\n",
    "    for the entire trip records and executes the code to compute the horizontal and\n",
    "    vertical components based on the method proposed in Jigsaw paper. \n",
    "    '''\n",
    "    SingleTripsInfo = [LR['SingleTripInfo'] for LR in \n",
    "                       con[RouteName]['TripsInfo'].find({'ConvertedToEarthAxis':False})]\n",
    "    for SingleTripInfo in SingleTripsInfo:\n",
    "        print(SingleTripInfo)\n",
    "        AcclMagRecord = [collection for collection in \n",
    "                         con[RouteName][SingleTripInfo+'.AcclMagData.Raw'].find().sort([('GPSIndex',1)])]\n",
    "\n",
    "        EarthaxisAccelerationOnRawRecords.ProcessEarthaxisHVComponentUsingJigSawMethod(RouteName,\n",
    "                                                                                       SingleTripInfo,\n",
    "                                                                                       AcclMagRecord,\n",
    "                                                                                       IntervalLength,RecordType)\n",
    "        con[RouteName]['TripsInfo'].update_one(\n",
    "            {'SingleTripInfo':SingleTripInfo},{'$set':{'ConvertedToEarthAxisRaw':True}})\n",
    "\n",
    "    '''Index'''\n",
    "    for index in range(len(SingleTripsInfo)):\n",
    "        con[RouteName][SingleTripsInfo[index]+\".EAccHVComponent.Raw\"+\"\"].create_index('GPSIndex')\n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Extraction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The feature `set-1 to set-4` are computed using the orientation independent horizontal and vertical components of accelerometer records for the window of `128 samples and 50% overlap`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ComputeFeatures_Raw(ProjectDataUsed, WindowList, WindowIndex, RecordType, RouteName):\n",
    "    \n",
    "    '''\n",
    "    input: The ProjectDataUsed variable specify whether the project dataset should to use project \n",
    "    dataset or the user collected dataset. The other variables specify the window size for feature\n",
    "    computation, record type (Raw or Segment other than stoppage segment), and route name.\n",
    "    \n",
    "    output: None\n",
    "    \n",
    "    function: It extracts the appropriate accelerometer components from the MongoDB database based\n",
    "    on the provided input and computes the features on the windowed accelerometer component. The \n",
    "    computed features are stored in the MongoDB database.\n",
    "    '''\n",
    "    \n",
    "    if ProjectDataUsed==True:\n",
    "        PDCar, PDBike, BMSingleTripsInfoList, CMSingleTripsInfoList = TransportModeFeatureHelper.GetTripsForTransportModes()\n",
    "\n",
    "        TransportModeFeatureHelper.GetFeaturesForGivenTripType (BMSingleTripsInfoList, 0,\n",
    "                                                            WindowList[WindowIndex],RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.GetFeaturesForGivenTripType (CMSingleTripsInfoList, 0,WindowList[WindowIndex],\n",
    "                                                                RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.GetFeaturesForGivenTripType (PDCar, 1,WindowList[WindowIndex],\n",
    "                                                                RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.GetFeaturesForGivenTripType (PDBike, 2,WindowList[WindowIndex],\n",
    "                                                                RecordType, RouteName)\n",
    "\n",
    "    else:\n",
    "        Trips = SingleTripsInfo = [LR['SingleTripInfo'] for LR in con[RouteName]['TripsInfo'].find(\n",
    "            {'ConvertedToEarthAxisRaw':True})]\n",
    "\n",
    "        BusTrips = [Trip for Trip in Trips if Trip.split['_'][1]=='Bus']\n",
    "        CarTrips = [Trip for Trip in Trips if Trip.split['_'][1]=='Car']\n",
    "        BikeTrips = [Trip for Trip in Trips if Trip.split['_'][1]=='Bike']\n",
    "\n",
    "        TransportModeFeatureHelper.GetFeaturesForGivenTripType (BusTrips, 0,\n",
    "                                                                WindowList[WindowIndex],RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.GetFeaturesForGivenTripType (CarTrips, 1,\n",
    "                                                                WindowList[WindowIndex],RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.GetFeaturesForGivenTripType (BikeTrips, 2,\n",
    "                                                                WindowList[WindowIndex],RecordType, RouteName)        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Processing: For Records other than Stoppage Segment\n",
    "This section describes the procedure for training the classifier on the `segments other than stoppage segment`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decomposition of accelerometer data\n",
    "The accelerometer record data is decomposed to `horizontal and vertical components` with the `IntervalLength` of `140 points.`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ExtractSegment_EarthAxis_OtherThanStoppages(ProjectDataUsed, RouteName, Speed_H = 5.6, Speed_L = 3):\n",
    "    \n",
    "    '''\n",
    "    input: The route name, interval length for computing accelerometer components, \n",
    "    speed range for computing segment other than stoppage segments and record type\n",
    "    variable to specify the segment type of the records.\n",
    "    \n",
    "    output: None\n",
    "    \n",
    "    function: It extracts the raw accelerometer records from the MongoDB database\n",
    "    for the computing segment other than stoppage segments and executes the code to\n",
    "    compute the horizontal and vertical components based on the method proposed in \n",
    "    Jigsaw paper. \n",
    "    '''\n",
    "    \n",
    "    '''Extract segment other than stoppage segments'''\n",
    "    if ProjectDataUsed==True:\n",
    "        BMSingleTripsInfoList,CMSingleTripsInfoList,PDSingleTripsInfoList = SegmentsOtherThanStoppageSegments.GetTripsBasedOnType(RouteName)\n",
    "        SegmentsOtherThanStoppageSegments.GetBMAndPDSegments(RouteName,BMSingleTripsInfoList,Speed_H, Speed_L)\n",
    "        SegmentsOtherThanStoppageSegments.GetBMAndPDSegments(RouteName,PDSingleTripsInfoList,Speed_H, Speed_L)\n",
    "        SegmentsOtherThanStoppageSegments.GetCMSegments(RouteName,CMSingleTripsInfoList,BMSingleTripsInfoList)\n",
    "        SegmentsOtherThanStoppageSegments.GetGPSAndAcclReadOfSegment(RouteName)\n",
    "\n",
    "    else:\n",
    "        SingleTripsInfo = [LR['SingleTripInfo'] for LR in con[RouteName]['TripsInfo'].find({'SegmentExtracted':False})]\n",
    "        SegmentsOtherThanStoppageSegments.GetBMAndPDSegments(RouteName,SingleTripsInfo, Speed_H, Speed_L)\n",
    "        SegmentsOtherThanStoppageSegments.GetGPSAndAcclReadOfSegment(RouteName)\n",
    "\n",
    "    '''\n",
    "    for SingleTripInfo in SingleTripsInfo:\n",
    "        con[RouteName]['TripsInfo'].update_one(\n",
    "            {'SingleTripInfo':SingleTripInfo},{'$set':{'ConvertedToEarthAxis':False}})\n",
    "    '''\n",
    "    \n",
    "    EarthaxisAcceleration.ConvertToEarthaxisAcc(RouteName,RecordType)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Features Extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ComputeFeatures_SegmentOtherThanStoppages(ProjectDataUsed, WindowList, WindowIndex, RecordType, RouteName):\n",
    "    \n",
    "    '''\n",
    "    input: The ProjectDataUsed variable specify whether the project dataset should to use project \n",
    "    dataset or the user collected dataset. The other variables specify the window size for feature\n",
    "    computation, record type (Raw or Segment other than stoppage segment), and route name.\n",
    "    \n",
    "    output: None\n",
    "    \n",
    "    function: It extracts the appropriate accelerometer components from the MongoDB database based\n",
    "    on the provided input and computes the features on the windowed accelerometer component. The \n",
    "    computed features are stored in the MongoDB database.\n",
    "    '''\n",
    "    \n",
    "    '''Recent Attempt'''\n",
    "\n",
    "    if ProjectDataUsed==True:\n",
    "        PDCar, PDBike, BMSingleTripsInfoList, CMSingleTripsInfoList = TransportModeFeatureHelper.GetTripsForTransportModes()\n",
    "\n",
    "        TransportModeFeatureHelper.ExtractFeaturesOfGivenTypeOfTrip(BMSingleTripsInfoList,\"Bus\",0,\n",
    "                                                                    WindowList[WindowIndex],RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.ExtractFeaturesOfGivenTypeOfTrip(CMSingleTripsInfoList,\"Bus\",0,\n",
    "                                                                    WindowList[WindowIndex],RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.ExtractFeaturesOfGivenTypeOfTrip(PDCar,\"Car\",1,WindowList[WindowIndex],\n",
    "                                                                    RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.ExtractFeaturesOfGivenTypeOfTrip(PDBike,\"Bike\",2,WindowList[WindowIndex],\n",
    "                                                                    RecordType, RouteName)    \n",
    "\n",
    "    else:\n",
    "        Trips = [LR['SingleTripInfo'] for LR in con[RouteName]['TripsInfo'].find(\n",
    "            {'ConvertedToEarthAxis':True})]\n",
    "\n",
    "        BusTrips = [Trip for Trip in Trips if Trip.split['_'][1]=='Bus']\n",
    "        CarTrips = [Trip for Trip in Trips if Trip.split['_'][1]=='Car']\n",
    "        BikeTrips = [Trip for Trip in Trips if Trip.split['_'][1]=='Bike']\n",
    "\n",
    "        TransportModeFeatureHelper.ExtractFeaturesOfGivenTypeOfTrip(BusTrips,\"Bus\",0,\n",
    "                                                                    WindowList[WindowIndex],RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.ExtractFeaturesOfGivenTypeOfTrip(CarTrips,\"Car\",1,WindowList[WindowIndex],\n",
    "                                                                    RecordType, RouteName)\n",
    "        TransportModeFeatureHelper.ExtractFeaturesOfGivenTypeOfTrip(BikeTrips,\"Bike\",2,WindowList[WindowIndex],\n",
    "                                                                    RecordType, RouteName)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The feature `set-1 to set-4` are computed using the orientation independent horizontal and vertical components of accelerometer records for the window of `128 samples and 50% overlap`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## For saving Mongo data in numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def LoadInMongoFromNp(RouteName, NpPathDir):\n",
    "\n",
    "    '''\n",
    "    input: The route name and numpy directory path\n",
    "    output: The MongoDB database collections from the Numpy files\n",
    "    function: It creates the MongoDB database of TripsInfo collections \n",
    "    and features collections from the Numpy files.\n",
    "    '''    \n",
    "    \n",
    "    CollectionName = 'TripsInfo'\n",
    "    TripsInfoRecords = np.load(f'{NpPathDir}/{RouteName}/{CollectionName}.npy', allow_pickle=True)\n",
    "    \n",
    "    print('Saving data in mongoDB')\n",
    "    print(RouteName, CollectionName)\n",
    "    con[RouteName][CollectionName].insert_many(TripsInfoRecords.tolist())\n",
    "    \n",
    "    CollectionNames = os.listdir(f'{NpPathDir}/{RouteName}')\n",
    "    #print(CollectionNames)\n",
    "    \n",
    "    CollectionNames_1 = [rec for rec in CollectionNames if '\\'.' not in rec] # To address the error\n",
    "    CollectionNames_2 = [rec for rec in CollectionNames if 'Feature' in rec]\n",
    "    \n",
    "    #print('Saving data in mongoDB')\n",
    "    for Collection in CollectionNames_2:\n",
    "        RecordsList = np.load(f'{NpPathDir}/{RouteName}/{Collection}', allow_pickle=True)\n",
    "        #print(Collection)\n",
    "        #pprint.pprint(RecordsList[0:3])\n",
    "        \n",
    "        CollectionName = Collection[0:-4]\n",
    "        \n",
    "        print(RouteName, CollectionName)\n",
    "        con[RouteName][CollectionName].insert_many(RecordsList.tolist())\n",
    "        \n",
    "    \n",
    "    \n",
    "def SaveInNp(RouteName, NpPathDir):\n",
    "    \n",
    "    '''\n",
    "    input: The route name and numpy directory path\n",
    "    output: Numpy files of the MongoDB database\n",
    "    function: It stores the Numpy files for the MongoDB database in the specified directory path\n",
    "    '''\n",
    "    \n",
    "    CollectionNames = [Collection for Collection in \n",
    "                        con[RouteName].list_collection_names() if Collection!='system.indexes']\n",
    "\n",
    "    for CollectionName in CollectionNames:\n",
    "        print('CollectionName', CollectionName)\n",
    "        RecordsList = [rec for rec in con[RouteName][CollectionName].find().sort([('_id',1)])]\n",
    "\n",
    "        for RecordDict in RecordsList:\n",
    "            del[RecordDict['_id']]\n",
    "\n",
    "        if os.path.exists(os.path.join(NpPathDir, RouteName)) == False:\n",
    "            os.mkdir(os.path.join(NpPathDir, RouteName))\n",
    "\n",
    "            \n",
    "        #np.save(f'{Path}/{Database}/{CollectionName}.npy', RecordsList)\n",
    "        np.save(os.path.join(NpPathDir, RouteName,f'{CollectionName}.npy'), RecordsList)\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Execution of Data extraction, accl. component, and feature computation for `.Raw` and `SegmentOtherThanStoppages`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = Path(os.getcwd())\n",
    "OneLevelUpPath = path.parents[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "IntervalLength = 160\n",
    "\n",
    "'''Trips and Window size for Feature extraction'''\n",
    "#BMSingleTripsInfoList,CMSingleTripsInfoList,PDSingleTripsInfoList = TransportModeFeatureHelper.GetTripsBasedOnType(RouteName)\n",
    "WindowList = [32,64,128,256,512]\n",
    "WindowIndex = 2\n",
    "WindowSize = WindowList[WindowIndex]\n",
    "\n",
    "'''For segment other than stoppages'''\n",
    "Speed_H = 5.6\n",
    "Speed_L = 3\n",
    "\n",
    "'''Variables for Classification'''\n",
    "ResultPathDir = os.path.join(str(OneLevelUpPath), 'results','Transport','')\n",
    "\n",
    "\n",
    "if os.path.exists(ResultPathDir) == False:\n",
    "    os.mkdir(ResultPathDir)\n",
    "\n",
    "\n",
    "TrainedModelPathDir = os.path.join(str(OneLevelUpPath), 'data', 'TrainedModel','Transport','')\n",
    "\n",
    "'''Path for Np'''\n",
    "NpPathDir = os.path.join(str(OneLevelUpPath), 'data','NpData')\n",
    "\n",
    "'''Path for Model'''\n",
    "ClassifierList = [GaussianNB(), LogisticRegression(random_state=0), \n",
    "                  RandomForestClassifier(max_depth=20), tree.DecisionTreeClassifier(), \n",
    "                  SVC(gamma='auto')\n",
    "                 ]\n",
    "\n",
    "ClassifierNameList = ['NB', 'LogisticRegression', 'RF', 'DT', 'SVC']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Variables\n",
    "\n",
    "`ProjectDataUsed`: determines whether the project data or the user's own data is used for execution.\n",
    "\n",
    "`UsedPreTrained`: determines whether the pretrained and precomputed dataset or raw data is used for execution.\n",
    "\n",
    "`UseMongoDB`: determines whether the MonngoDB database or Numpy file is used for execution.\n",
    "\n",
    "`ReducedKFolds`: If false: one fold is used, else ten-fold is used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "ProjectDataUsed = True\n",
    "UsedPreTrained = True\n",
    "ReducedKFolds = False\n",
    "UseMongoDB = True\n",
    "'''\n",
    "\n",
    "#'''\n",
    "ProjectDataUsed = True\n",
    "UsedPreTrained = True\n",
    "ReducedKFolds = True\n",
    "UseMongoDB = False\n",
    "#'''\n",
    "\n",
    "'''\n",
    "ProjectDataUsed = True\n",
    "UsedPreTrained = False\n",
    "ReducedKFolds = False\n",
    "UseMongoDB = False\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#TransportModeDir = '/home/pruthvish/JRF/GitVersion_PMC/Data/TransportMode/'\n",
    "if ProjectDataUsed==True:\n",
    "    TransportModeDir = os.path.join(str(OneLevelUpPath), 'data', 'TransportMode','')\n",
    "else:\n",
    "    TransportModeDir = os.path.join(str(OneLevelUpPath), 'data', 'UserData', 'TransportMode','')\n",
    "RouteNamesList = ['ISCON_PDPU_For_Transport_Mode']\n",
    "#RouteNamesList = [f for f in os.listdir(TransportModeDir)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "for RouteName in RouteNamesList:\n",
    "    if UsedPreTrained==False and UseMongoDB==True:\n",
    "        #'''\n",
    "        print('Reading data and saving in MongoDB')\n",
    "        ReadAndSaveData(TransportModeDir, RouteName)\n",
    "\n",
    "        RecordType = '.Raw'\n",
    "        print(f'Computing preprocessing for {RecordType} segments')\n",
    "        ComputeEarthAxisComponentRaw(RouteName, IntervalLength, RecordType)\n",
    "        print(f'Computing features for {RecordType} segments')\n",
    "        ComputeFeatures_Raw(ProjectDataUsed, WindowList, WindowIndex, RecordType, RouteName)\n",
    "        #'''\n",
    "\n",
    "        RecordType = '.SegmentOtherThanStoppage'\n",
    "        \n",
    "        print(f'Computing preprocessing for {RecordType} segments')\n",
    "        ExtractSegment_EarthAxis_OtherThanStoppages(ProjectDataUsed, RouteName, Speed_H = 5.6, Speed_L = 3)\n",
    "        print(f'Computing features for {RecordType} segments')\n",
    "        ComputeFeatures_SegmentOtherThanStoppages(ProjectDataUsed, WindowList, WindowIndex, RecordType, RouteName)\n",
    "\n",
    "        print('Saving MongoData in Np files')\n",
    "        SaveInNp(RouteName, NpPathDir)\n",
    "    \n",
    "    elif UseMongoDB==True:\n",
    "        \n",
    "        RouteNamesListInDB = con.list_database_names()\n",
    "        if RouteName not in RouteNamesListInDB:\n",
    "            '''Load the data for RouteName, if RouteName is not in RouteNamesList'''\n",
    "            print('Loading MongoData from Np files')\n",
    "            LoadInMongoFromNp(RouteName, NpPathDir)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetFeaturesForClass(RouteNameTestList, FeatureType, RecordType,\n",
    "                        SelectedFeatures, SelectedFeaturesFlag, NpPathDir, UseMongoDB):\n",
    "    if UseMongoDB==True:\n",
    "        \n",
    "        if ProjectDataUsed==True:\n",
    "            X, y = TMC_Helper.GetData(FeatureType, RecordType, SelectedFeatures, SelectedFeaturesFlag)\n",
    "        else:\n",
    "            First_InputFlag = True\n",
    "            for RouteNameTest in RouteNameTestList:\n",
    "                X_Route, y_Route = TMC_Helper.GetData_User(RouteNameTest, FeatureType, RecordType,\n",
    "                                                           SelectedFeatures, SelectedFeaturesFlag)\n",
    "\n",
    "                if First_InputFlag==True:\n",
    "                    X = X_Route\n",
    "                    y = y_Route\n",
    "                    First_InputFlag = False\n",
    "\n",
    "                else:\n",
    "                    X = np.concatenate((X, X_Route))\n",
    "                    y = np.concatenate((y, y_Route))\n",
    "                    '''\n",
    "                    X += X_Route\n",
    "                    y += y_Route\n",
    "                    '''\n",
    "\n",
    "                print('X.shape', X.shape)\n",
    "                print('y.shape', y.shape)\n",
    "        \n",
    "        \n",
    "        '''Save in NpData'''\n",
    "        \n",
    "        if os.path.exists(os.path.join(NpPathDir,'Transport'))==False:\n",
    "            os.mkdir(os.path.join(NpPathDir,'Transport'))\n",
    "            \n",
    "        np.save(f'{NpPathDir}/Transport/X_{FeatureType}_{RecordType}_{SelectedFeaturesFlag}.npy', X)\n",
    "        np.save(f'{NpPathDir}/Transport/y_{FeatureType}_{RecordType}_{SelectedFeaturesFlag}.npy', y)\n",
    "        \n",
    "    else:\n",
    "        X = np.load(f'{NpPathDir}/Transport/X_{FeatureType}_{RecordType}_{SelectedFeaturesFlag}.npy',\n",
    "                    allow_pickle=True)\n",
    "        y = np.load(f'{NpPathDir}/Transport/y_{FeatureType}_{RecordType}_{SelectedFeaturesFlag}.npy',\n",
    "                    allow_pickle=True)\n",
    "    \n",
    "    return(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ApplyClassification(Modes, FeatureType, RecordType, SelectedFeatures, SelectedFeaturesFlag,\n",
    "                        Classifier, ClassifierName, ResultPathDir, ProjectDataUsed, RouteNameTestList,\n",
    "                        UsedPreTrained, ClassifierName_ForModelSave, TrainedModelPathDir, ReducedKFolds,\n",
    "                        NpPathDir, UseMongoDB\n",
    "                       ):\n",
    "    '''\n",
    "    input: \n",
    "        Modes: The number of classes\n",
    "        \n",
    "        FeatureType and RecordType: feature type and record type information\n",
    "        \n",
    "        SelectedFeatures and SelectedFeaturesFlag: selected features list and flag to \n",
    "        determine if selected features are list is used\n",
    "        \n",
    "        Classifier and ClassifierName: classifier object variable and classifier name\n",
    "        \n",
    "        ResultPathDir: path of result directory\n",
    "        \n",
    "        ProjectDataUsed: flag to determine whether the project dataset or user dataset is used\n",
    "        \n",
    "        RouteNameTestList: The route names list to be considered during classification\n",
    "        \n",
    "        UsedPreTrained: Flag to determine whether the pretrained classifier should be used\n",
    "        or the classifier is to be trained\n",
    "        \n",
    "        ClassifierName_ForModelSave: the name of classifier for saving a model\n",
    "        \n",
    "        TrainedModelPathDir: path of trainedModel directory \n",
    "    \n",
    "    output: None\n",
    "    \n",
    "    function: It trains and validates the classifier the ten-fold cross-validation with stratified\n",
    "    sampling of each class. The performance metrics of the classifier is stores as a txt file in the\n",
    "    result directory\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    MetricsDict = TMC_Helper.InitializeMetricsDict(Modes)\n",
    "    \n",
    "    \n",
    "    X, y = GetFeaturesForClass(RouteNameTestList, FeatureType, RecordType,\n",
    "                               SelectedFeatures, SelectedFeaturesFlag, NpPathDir, UseMongoDB)    \n",
    "\n",
    "            \n",
    "    MetricsDict = TMC_Helper.TrainAndPredict(X, y, Classifier, MetricsDict, ResultPathDir,\n",
    "                                             ClassifierName, UsedPreTrained, \n",
    "                                             ClassifierName_ForModelSave, TrainedModelPathDir, ReducedKFolds)\n",
    "    \n",
    "    TMC_Helper.PrintMetricsDict(ClassifierName, ResultPathDir, FeatureType, RecordType,\n",
    "                                SelectedFeaturesFlag, MetricsDict)\n",
    "    '''\n",
    "    filename = os.path.join(ResultPathDir,f'{ClassifierName}_TrainedModel.sav')\n",
    "    f'ResultPathDir{ClassifierName}'\n",
    "    pickle.dump(model, open(, 'wb'))\n",
    "    '''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "Modes = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set-1\n",
      "Feature set-2\n",
      "Feature set-3\n",
      "Feature set-4\n",
      "Classifier, ClassifierName GaussianNB() NB\n",
      "Feature set-1\n",
      "Feature set-2\n",
      "Feature set-3\n",
      "Feature set-4\n",
      "Classifier, ClassifierName GaussianNB() NB\n",
      "Feature set-1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set-2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set-3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set-4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classifier, ClassifierName LogisticRegression(random_state=0) LogisticRegression\n",
      "Feature set-1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set-2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set-3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature set-4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/home/pruthvish/JRF/RoadNetwork/RoadNetwork_VirtualEnv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classifier, ClassifierName LogisticRegression(random_state=0) LogisticRegression\n",
      "Feature set-1\n",
      "Feature set-2\n",
      "Feature set-3\n",
      "Feature set-4\n",
      "Classifier, ClassifierName RandomForestClassifier(max_depth=20) RF\n",
      "Feature set-1\n",
      "Feature set-2\n",
      "Feature set-3\n",
      "Feature set-4\n",
      "Classifier, ClassifierName RandomForestClassifier(max_depth=20) RF\n",
      "Feature set-1\n",
      "Feature set-2\n",
      "Feature set-3\n",
      "Feature set-4\n",
      "Classifier, ClassifierName DecisionTreeClassifier() DT\n",
      "Feature set-1\n",
      "Feature set-2\n",
      "Feature set-3\n",
      "Feature set-4\n",
      "Classifier, ClassifierName DecisionTreeClassifier() DT\n",
      "Feature set-1\n",
      "Feature set-2\n",
      "Feature set-3\n",
      "Feature set-4\n",
      "Classifier, ClassifierName SVC(gamma='auto') SVC\n",
      "Feature set-1\n",
      "Feature set-2\n",
      "Feature set-3\n",
      "Feature set-4\n",
      "Classifier, ClassifierName SVC(gamma='auto') SVC\n"
     ]
    }
   ],
   "source": [
    "for Classifier, ClassifierName in zip(ClassifierList, ClassifierNameList):\n",
    "    for RecordType in ['.Raw', '.SegmentOtherThanStoppage']:\n",
    "        \n",
    "        RecordTypeName = RecordType.split('.')[-1]\n",
    "        \n",
    "        '''Feature set-1'''\n",
    "        FeatureType = '.HARFeature'\n",
    "        SelectedFeaturesFlag = False\n",
    "        SelectedFeatures = []\n",
    "        ClassifierName_ForModelSave = f'{ClassifierName}_{RecordTypeName}_Set1'\n",
    "        print('Feature set-1')\n",
    "        ApplyClassification(Modes, FeatureType, RecordType, SelectedFeatures, SelectedFeaturesFlag,\n",
    "                            Classifier, ClassifierName, ResultPathDir, ProjectDataUsed, RouteNamesList, \n",
    "                            UsedPreTrained, ClassifierName_ForModelSave, TrainedModelPathDir, ReducedKFolds,\n",
    "                            NpPathDir, UseMongoDB\n",
    "                           )\n",
    "\n",
    "        '''Feature set-2'''\n",
    "        FeatureType = '.HARFeature'\n",
    "        SelectedFeaturesFlag = True\n",
    "        SelectedFeatures = TMC_Helper.SelectedFeaturesForFeatureType(FeatureType)\n",
    "        ClassifierName_ForModelSave = f'{ClassifierName}_{RecordTypeName}_Set2'\n",
    "        print('Feature set-2')\n",
    "        ApplyClassification(Modes, FeatureType, RecordType, SelectedFeatures, SelectedFeaturesFlag,\n",
    "                            Classifier, ClassifierName, ResultPathDir, ProjectDataUsed, RouteNamesList,\n",
    "                            UsedPreTrained, ClassifierName_ForModelSave, TrainedModelPathDir, ReducedKFolds,\n",
    "                            NpPathDir, UseMongoDB\n",
    "                           )\n",
    "\n",
    "        '''Feature set-3'''\n",
    "        FeatureType = '.TransportFeatures'\n",
    "        SelectedFeatures = []\n",
    "        SelectedFeaturesFlag = False\n",
    "        ClassifierName_ForModelSave = f'{ClassifierName}_{RecordTypeName}_Set3'\n",
    "        print('Feature set-3')\n",
    "        ApplyClassification(Modes, FeatureType, RecordType, SelectedFeatures, SelectedFeaturesFlag,\n",
    "                            Classifier, ClassifierName, ResultPathDir, ProjectDataUsed, RouteNamesList,\n",
    "                            UsedPreTrained, ClassifierName_ForModelSave, TrainedModelPathDir, ReducedKFolds,\n",
    "                            NpPathDir, UseMongoDB\n",
    "                            \n",
    "                           )   \n",
    "\n",
    "\n",
    "        '''Feature set-4'''\n",
    "        FeatureType = '.TransportFeatures'\n",
    "        SelectedFeatures = TMC_Helper.SelectedFeaturesForFeatureType(FeatureType)\n",
    "        SelectedFeaturesFlag = True\n",
    "        ClassifierName_ForModelSave = f'{ClassifierName}_{RecordTypeName}_Set4'\n",
    "        print('Feature set-4')\n",
    "        ApplyClassification(Modes, FeatureType, RecordType, SelectedFeatures, SelectedFeaturesFlag,\n",
    "                            Classifier, ClassifierName, ResultPathDir, ProjectDataUsed, RouteNamesList,\n",
    "                            UsedPreTrained, ClassifierName_ForModelSave, TrainedModelPathDir, ReducedKFolds,\n",
    "                            NpPathDir, UseMongoDB\n",
    "                           )        \n",
    "        \n",
    "        print('Classifier, ClassifierName', Classifier, ClassifierName)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results for .Raw, .HARFeature, and selected features flag: False\n",
      "ConfusionMatrix \n",
      "[[1245.  134.  212.]\n",
      " [   2. 1754.   11.]\n",
      " [ 135.   11. 1865.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.90086831 0.92364402 0.89319923]\n",
      " \n",
      "RecallValue \n",
      "[0.78252671 0.9926429  0.9273993 ]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.83753784 0.95690125 0.90997804]\n",
      " \n",
      "AccuracyValue \n",
      "0.9059415161110076\n",
      " \n",
      "Results for .Raw, .HARFeature, and selected features flag: True\n",
      "ConfusionMatrix \n",
      "[[1266.  135.  190.]\n",
      " [   4. 1753.   10.]\n",
      " [ 165.    8. 1838.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.88222997 0.92457806 0.90186457]\n",
      " \n",
      "RecallValue \n",
      "[0.79572596 0.99207697 0.91397315]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.83674818 0.95713896 0.90787849]\n",
      " \n",
      "AccuracyValue \n",
      "0.9046377351462097\n",
      " \n",
      "Results for .Raw, .TransportFeatures, and selected features flag: False\n",
      "ConfusionMatrix \n",
      "[[ 972.   48.  744.]\n",
      " [  34. 1722.   11.]\n",
      " [ 145.   90. 1776.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.84448306 0.92580645 0.70169893]\n",
      " \n",
      "RecallValue \n",
      "[0.55102041 0.97453311 0.88314272]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.66689537 0.94954508 0.78203435]\n",
      " \n",
      "AccuracyValue \n",
      "0.8065680259833995\n",
      " \n",
      "Results for .Raw, .TransportFeatures, and selected features flag: True\n",
      "ConfusionMatrix \n",
      "[[ 804.   38.  922.]\n",
      " [  47. 1711.    9.]\n",
      " [ 149.  156. 1706.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.804      0.89816273 0.64694729]\n",
      " \n",
      "RecallValue \n",
      "[0.45578231 0.96830787 0.84833416]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.58176556 0.93191721 0.73407917]\n",
      " \n",
      "AccuracyValue \n",
      "0.7616383976903645\n",
      " \n",
      "Results for .SegmentOtherThanStoppage, .HARFeature, and selected features flag: False\n",
      "ConfusionMatrix \n",
      "[[ 890.  101.  106.]\n",
      " [   0. 1103.    0.]\n",
      " [  62.   11. 1298.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.93487395 0.90781893 0.92450142]\n",
      " \n",
      "RecallValue \n",
      "[0.81130356 1.         0.94675419]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.86871645 0.95168248 0.9354955 ]\n",
      " \n",
      "AccuracyValue \n",
      "0.9215905908709046\n",
      " \n",
      "Results for .SegmentOtherThanStoppage, .HARFeature, and selected features flag: True\n",
      "ConfusionMatrix \n",
      "[[ 906.   95.   96.]\n",
      " [   2. 1101.    0.]\n",
      " [  80.    6. 1285.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.91700405 0.91597338 0.93048516]\n",
      " \n",
      "RecallValue \n",
      "[0.82588879 0.99818676 0.93727206]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.86906475 0.95531453 0.93386628]\n",
      " \n",
      "AccuracyValue \n",
      "0.921870624474937\n",
      " \n",
      "Results for .SegmentOtherThanStoppage, .TransportFeatures, and selected features flag: False\n",
      "ConfusionMatrix \n",
      "[[1016.   27.  386.]\n",
      " [  18. 1085.    0.]\n",
      " [  75.   50. 1246.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.91614067 0.93373494 0.76348039]\n",
      " \n",
      "RecallValue \n",
      "[0.7109867  0.98368087 0.90882567]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.80063042 0.9580574  0.82983683]\n",
      " \n",
      "AccuracyValue \n",
      "0.8575454778375609\n",
      " \n",
      "Results for .SegmentOtherThanStoppage, .TransportFeatures, and selected features flag: True\n",
      "ConfusionMatrix \n",
      "[[8.660e+02 1.900e+01 5.440e+02]\n",
      " [2.000e+01 1.082e+03 1.000e+00]\n",
      " [8.200e+01 1.000e+02 1.189e+03]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.8946281  0.9009159  0.68569781]\n",
      " \n",
      "RecallValue \n",
      "[0.60601819 0.98096102 0.86725018]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.72256988 0.93923611 0.76586151]\n",
      " \n",
      "AccuracyValue \n",
      "0.8037407122726108\n",
      " \n",
      "Results for .Raw, .HARFeature, and selected features flag: False\n",
      "ConfusionMatrix \n",
      "[[13828.   631.  1450.]\n",
      " [  182. 17323.   161.]\n",
      " [ 1160.    71. 18879.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.91238767 0.96298108 0.92102649]\n",
      " \n",
      "RecallValue \n",
      "[0.86919816 0.9805811  0.93878667]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.88872828 0.97126292 0.92961454]\n",
      " \n",
      "AccuracyValue \n",
      "0.9319146538374101\n",
      " \n",
      "Results for .Raw, .HARFeature, and selected features flag: True\n",
      "ConfusionMatrix \n",
      "[[13589.   834.  1486.]\n",
      " [  302. 17217.   147.]\n",
      " [ 1236.    78. 18796.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.89291679 0.95272465 0.92115839]\n",
      " \n",
      "RecallValue \n",
      "[0.85417624 0.97457938 0.93465937]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.87151749 0.9628286  0.92768453]\n",
      " \n",
      "AccuracyValue \n",
      "0.9239416251989189\n",
      " \n",
      "Results for .Raw, .TransportFeatures, and selected features flag: False\n",
      "ConfusionMatrix \n",
      "[[13022.  1750.  2867.]\n",
      " [  517. 16790.   359.]\n",
      " [ 2188.   251. 17671.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.82722946 0.90459791 0.85106875]\n",
      " \n",
      "RecallValue \n",
      "[0.73825431 0.95040827 0.87871706]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.77792551 0.92393041 0.86108222]\n",
      " \n",
      "AccuracyValue \n",
      "0.8568614066942724\n",
      " \n",
      "Results for .Raw, .TransportFeatures, and selected features flag: True\n",
      "ConfusionMatrix \n",
      "[[12229.  2193.  3217.]\n",
      " [  600. 16445.   621.]\n",
      " [ 2250.   429. 17431.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.79991198 0.8815744  0.82587539]\n",
      " \n",
      "RecallValue \n",
      "[0.69330008 0.93087294 0.8667827 ]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.73875239 0.90077916 0.84225473]\n",
      " \n",
      "AccuracyValue \n",
      "0.8319938223710899\n",
      " \n",
      "Results for .SegmentOtherThanStoppage, .HARFeature, and selected features flag: False\n",
      "ConfusionMatrix \n",
      "[[10095.   407.   462.]\n",
      " [  122. 10845.    61.]\n",
      " [  288.    30. 13392.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.95898816 0.96451347 0.9635305 ]\n",
      " \n",
      "RecallValue \n",
      "[0.92073131 0.9834088  0.97680525]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.93826527 0.97313057 0.96989152]\n",
      " \n",
      "AccuracyValue \n",
      "0.9616269717071931\n",
      " \n",
      "Results for .SegmentOtherThanStoppage, .HARFeature, and selected features flag: True\n",
      "ConfusionMatrix \n",
      "[[ 9938.   545.   481.]\n",
      " [  201. 10776.    51.]\n",
      " [  350.    33. 13327.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.94409667 0.95383342 0.96325681]\n",
      " \n",
      "RecallValue \n",
      "[0.90640624 0.97715264 0.97206419]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.92294116 0.96434943 0.96729499]\n",
      " \n",
      "AccuracyValue \n",
      "0.9534757425793055\n",
      " \n",
      "Results for .SegmentOtherThanStoppage, .TransportFeatures, and selected features flag: False\n",
      "ConfusionMatrix \n",
      "[[12392.   856.  1037.]\n",
      " [  420. 10401.   207.]\n",
      " [  908.   132. 12670.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.90384932 0.92272971 0.91508678]\n",
      " \n",
      "RecallValue \n",
      "[0.86748784 0.94314796 0.92414296]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.883384   0.92996899 0.91711708]\n",
      " \n",
      "AccuracyValue \n",
      "0.9087719588540824\n",
      " \n",
      "Results for .SegmentOtherThanStoppage, .TransportFeatures, and selected features flag: True\n",
      "ConfusionMatrix \n",
      "[[12022.   991.  1272.]\n",
      " [  509. 10174.   345.]\n",
      " [  956.   192. 12562.]]\n",
      " \n",
      "PrecissionValue \n",
      "[0.89010439 0.90968391 0.892507  ]\n",
      " \n",
      "RecallValue \n",
      "[0.84158943 0.92256714 0.9162655 ]\n",
      " \n",
      "F1ScoreValue \n",
      "[0.8618747  0.91159459 0.90135403]\n",
      " \n",
      "AccuracyValue \n",
      "0.8907051023191428\n",
      " \n",
      "\n"
     ]
    }
   ],
   "source": [
    "'''Read the value for one of the machine learning algorithm'''\n",
    "file = os.path.join(ResultPathDir,f'{ClassifierName}.txt')\n",
    "f = open(file, \"r\")\n",
    "print(f.read())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
